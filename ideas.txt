---Allocation and initialization---

-RAII is rejected. You are ALLOWED to have uninitialized memory of any type.
-Maybe there should still be some way to formally initialize something so that
	you can have constraints that are set when you decide to initialize it.
	-You can override this

Syntax to arbitrarily set members of a struct in a single statement. Special syntax that requires that you set all members that are tagged with some property?

Type modifier to encode whether a specific variable is initialized, and programmer needs to supply a compiler directive/cast to go from
uninitialized -> initialized. Returning an uninitialized value/pointer would be a type mismatch error.
This would give me pretty good non-nullable checks too. Could be an error to perform the directive if you didn't set non-nullable pointers?

---Operator overloading---
-Allow overloading of arithmetic operators but disallow modifying the operands to limit the amount of "unknown" that is going on?
Or maybe use a special notation that is similar to +, but is distinct so that the reader knows it is overloaded.
Could be ++ or (+) <- hard to type



---Interfaces---
-Interface is the way that dynamic dispatch is done.
-Define a list of functions that must exist with the specified type in the appropriate spot.
-By default are "implicit", but can be marked as "implicit" or "explicit". If explicit, implementing types
	must say in their definition that they implement the interface and it is enforced by the compiler, even
	if they are never used as such. Otherwise, the compiler only checks the implementation if it is actually
	used as that type of interface.

- Should interface also specify data members that you must have?
- Should the parametr in the interface be required to be "using" ?

interface IToString ::
{
	string ToString(this);
}

struct SomeExplicitStruct : IToString :
{
	// ...
}

string ToString(SomeExplicitStruct s) ::
{
	// ...
}

struct SomeImplicitStruct ::
{
	// ...
}

string ToString(SomeImplicitStruct s) ::
{
	// ...
}


---Defer---

Like if, you are permitted to put a single statement only if it is on the same line. If the next statement is not on the same line,
it MUST be a block statement:

defer free(something);

// or

defer
{
	free(something0);
	free(something1);

	// Should nested defer be allowed?
}



---Misc---
-constexpr (or equivalent) on function parameter? This allows static asserts for specific function parameters. Meh, maybe this is an area for templates.
-implies operator? a implies b is syntactic sugar for !a || b
	- how would this work with short circuit evaluation?
	- would only really be useful for asserts... maybe warn if used outside of an assert?
-"banish" keyword that makes a variable no longer in scope. Can be used to help avoid typos. Like if a parameters in cTabs and you want to make a variable cTabsNext = cTabs + 1 that you pass to recursive function calls, then you can banish cTabs to make sure you don't accidentally pass that.
-different operators for pointer arithmetic? ptr + 4 increments by 4 * size of underlying ptr type, but ptr ++ 4 increments be 4 bytes?
